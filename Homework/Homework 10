{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1s1ALGfR6NX2Al0tJc1YXTrD_WLsDphVw","timestamp":1701356873771},{"file_id":"1xtxooDNfBuf__qCWwOoEoSGMsMW9LGyn","timestamp":1701201063219},{"file_id":"12e1Ez0bQ6KxbxJgUCeG1lmz5Nuce0be0","timestamp":1619020680898}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"dblxHufQ5xYu"},"source":["# Problem 1 (2 points)\n","\n","Recall that for the original GAN, the discriminator $f_\\phi(x)$ is trained with the following optimization:\n","\n","$$\\max_\\phi p(x) c [f_\\phi(x)] + q_\\theta(x) \\log [1 - f_\\phi(x)]$$\n","\n","where $p(x)$ is the true data distribution, $q_\\theta(x)$ is the generator's learned distribution, and $f_\\phi(x) \\in [0, 1]$.\n","\n","1. Assuming $q_\\theta(x)$ is fixed, what is the solution to this optimization problem? \"Solution\" here means the function $f_\\phi(x)$ that maximizes the above objective. Your expression should be in terms of $p(x)$ and $q_\\theta(x)$.\n","1. Assume that $q_\\theta(x) = p(x)$, i.e. the generator has learned to fit the data distribution perfectly. What is the optimal discriminator in this case?"]},{"cell_type":"markdown","source":["### 1.1)\n","Assuming that $q_\\theta(x)$ is fixed:\n","\n","We let:\n","\n","\\begin{align}\n","&f_\\phi(x) = y, \\\\\n","&p(x) = a, \\\\\n","&q_\\theta(x) = b\n","\\end{align}\n","\n","We find $\\frac{d}{dy}$ of the following expression and make it equal to $0$, finding the value of $y$ that maximizes the expression:\n","\\begin{align}\n","&\\frac{d}{dy}[a \\log(y) + b \\log(1-y)] = 0 \\\\\n","& \\frac{a}{y} - \\frac{b}{1-y} = 0 \\\\\n","& \\frac{a}{y} = \\frac{b}{1-y} \\\\\n","&a-ay = by \\\\\n","&a = y(a+b) \\\\\n","& y = \\frac{a}{a+b}\n","\\end{align}\n","\n","Substituting the original variables and constants back gives us the solution:\n","\n","$$ f_\\phi^*(x) = \\frac{p(x)}{p(x) + q_\\theta(x)}$$\n","\n","\n"],"metadata":{"id":"DwZq5mYSxLkm"}},{"cell_type":"markdown","source":["### 1.2)\n","\n","Given the solution in 1.1), we substitute $q_\\theta(x) = p(x)$, yielding the following result:\n","\n","$$ f_\\phi^*(x) = \\frac{p(x)}{p(x) + p(x)}$$\n","$$f_\\phi^*(x) = \\frac{1}{2}$$"],"metadata":{"id":"0feIWHMtxPd6"}},{"cell_type":"markdown","metadata":{"id":"VkS2UbfP_-J4"},"source":["# Problem 2 (1 point)\n","\n","Recall that the forward process for the Diffusion model is defined as\n","\n","$$q(x_t | x_{t - 1}) = \\mathop{\\mathcal{N}}\\left(x_t; \\sqrt{1 - \\beta_t} x_{t - 1}, \\beta_t I\\right)$$\n","\n","Let $\\bar{a}_t = \\prod_{s = 1}^t (1 - \\beta_s)$. Show that\n","\n","$$q(x_t | x_0) = \\mathop{\\mathcal{N}}\\left(x_t; \\sqrt{\\bar{a}_t} x_0, (1 - \\bar{a})_t I\\right)$$"]},{"cell_type":"markdown","source":["### 2)\n","We'll utilize the [reparameterization trick](https://theaisummer.com/latent-variable-models/#reparameterization-trick) of the normal distribution:\n","\n","Let\n","\\begin{align}\n","&\\bar{a}_t = \\prod_{s = 1}^t a_s,\\\\\n","&a_t=(1-\\beta_t) \\\\\n","\\end{align}\n","\n","Given $\\epsilon \\sim \\mathop{\\mathcal{N}}\\left(0, 1\\right) $ we can rewrite $\\mathop{\\mathcal{N}}\\left(\\mu, \\sigma^2 \\right)$ as:\n","\n","$$\\mathop{\\mathcal{N}}\\left(\\mu, \\sigma^2 \\right) = \\mu + \\sigma \\cdot \\epsilon $$\n","\n","Applying the reparameterization and substituing $a_t$ gives us:\n","\n","\n","\\begin{align}\n","q(x_t | x_{t - 1})  &= \\mathop{\\mathcal{N}}\\left(x_t; \\sqrt{1 - \\beta_t} x_{t - 1}, \\beta_t I\\right) \\\\\n","&= \\sqrt{1 - \\beta_t} x_{t - 1} + \\sqrt{\\beta} \\cdot \\epsilon \\\\\n","&= \\sqrt{a_t} x_{t - 1} + \\sqrt{1 - a_t} \\cdot \\epsilon \\\\\n","&= \\sqrt{a_t a_{t-1}} x_{t - 2} + \\sqrt{1 - a_t a_{t-1}} \\cdot \\epsilon \\\\\n","&= \\sqrt{a_t a_{t-1} a_{t-2}} x_{t - 3} + \\sqrt{1 - a_t a_{t-1} a_{t-2}} \\cdot \\epsilon \\\\\n","&= \\sqrt{a_t a_{t-1} \\dots a_1 a_0} x_0 + \\sqrt{1 - a_t a_{t-1} \\dots a_1 a_0} \\cdot \\epsilon \\\\\n","&= \\sqrt{\\bar{a}_t} x_0 + \\sqrt{1 - \\bar{a}_t} \\cdot \\epsilon \\\\\n","\\end{align}\n","\n","Therefore:\n","\n","$$q(x_t | x_0) = \\mathop{\\mathcal{N}}\\left(x_t; \\sqrt{\\bar{a}_t} x_0, (1 - \\bar{a}_t) I\\right)$$"],"metadata":{"id":"p8bK3ErPxTcw"}},{"cell_type":"markdown","source":["# Problem 3 (2 points)\n","\n","Recall that, when training a VAE, we maximize the following objective:\n","\n","$$\\mathbb{E}_{z \\sim q_\\phi (z | x)} \\log p_\\theta(x | z) - \\mathop{\\text{KL}}(q_\\phi(z | x) || p(z))$$\n","\n","1. Show that this objective is equal to $\\log p_\\theta(x) - \\mathop{\\text{KL}}(q_\\phi(z | x) || p(z | x))$ and explain why it is therefore less than or equal to $\\log p_\\theta(x)$.\n","1. Assume that $q(z)$ is a univariate Gaussian with mean $\\mu = 0$ and standard deviation $\\sigma \\in \\mathbb{R}$ and p(z) is a standard (zero-mean unit-variance) Gaussian. Derive a closed-form expression for $\\mathop{\\text{KL}}(q(z) || p(z))$ and plot it with respect to $\\sigma$."],"metadata":{"id":"vpue6NgGiKEd"}},{"cell_type":"markdown","source":["### 3.1)\n","We expand the original objective to get the alternative objective:\n","\\begin{align}\n","&\\mathbb{E}_{z \\sim q_\\phi (z | x)} \\log p_\\theta(x | z) - \\mathop{\\text{KL}}(q_\\phi(z | x) || p(z)) \\\\\n","& = \\mathbb{E}_{z \\sim q_\\phi (z | x)} \\left[ \\log p_\\theta(x | z)\\right] + \\mathbb{E}_{z \\sim q_\\phi (z | x)}\\left[ \\log \\frac{p(z)}{q_\\phi(z|x)}\\right] \\\\\n","& = \\mathbb{E}_{z \\sim q_\\phi (z | x)} \\left[ \\log p_\\theta(x | z)\\frac{p_\\theta(x)}{p_\\theta(x)} + \\log \\frac{p(z)}{q_\\phi(z|x)}\\right] \\\\\n","& = \\mathbb{E}_{z \\sim q_\\phi (z | x)} \\left[ \\log p_\\theta(x) + \\log \\frac{p_\\theta(x | z)p(z)}{p_\\theta(x)}\\frac{1}{q_\\phi(z|x)}\\right] \\\\\n","& = \\mathbb{E}_{z \\sim q_\\phi (z | x)} \\left[ \\log p_\\theta(x) + \\log \\frac{p_\\theta(x ,z)}{p_\\theta(x)}\\frac{1}{q_\\phi(z|x)}\\right] \\\\\n","& = \\mathbb{E}_{z \\sim q_\\phi (z | x)} \\left[ \\log p_\\theta(x) + \\log \\frac{p(z|x)}{q_\\phi(z|x)}\\right] \\\\\n","& = \\log p_\\theta(x) - \\mathop{\\text{KL}}(q_\\phi(z | x) || p(z | x))\n","\\end{align}\n","\n","Since:\n","\n","$$\\mathop{\\text{KL}}(q_\\phi(z | x) || p(z | x)) \\geq 0$$\n","\n","We have:\n","\n","$$ \\log p_\\theta(x) - \\mathop{\\text{KL}}(q_\\phi(z | x) || p(z | x)) \\leq  \\log p_\\theta(x)$$\n"],"metadata":{"id":"dfh0_d5BxV_j"}},{"cell_type":"markdown","source":["### 3.2)\n","\n","We know that $q(z)$ is a univariate Gaussian with $\\mu =0 $ and standard deviation $\\sigma = 1$, and $p(z)$ is a zero-mean unit-variance standard Gaussian. Therefore, we can define both as:\n","\n"," $$\\mathcal{N}(z|\\mu,\\sigma^2) = \\frac{1}{(2\\pi\\sigma^2)^{1/2}}\\exp \\left\\{ -\\frac{1}{2\\sigma^2}(z - \\mu)^2 \\right\\} $$\n","\n"," The KL divergence has therefiore the closed-form solution:\n","\\begin{align}\n","  \\mathop{\\text{KL}}(q(z) || p(z)) & = \\mathop{\\text{KL}}\\left(\\mathcal{N}(z|0,\\sigma^2) || \\mathcal{N}(z|0,1)\\right) \\\\\n","  & = \\sum_{z \\in \\mathcal{Z}} \\mathcal{N}(z|0,\\sigma^2) \\log \\left(\\frac{\\mathcal{N}(z|0,\\sigma^2)}{\\mathcal{N}(z|0,1)} \\right)\n"," \\end{align}"],"metadata":{"id":"Zr5L5RJ3xYkR"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy.stats import norm\n","from scipy.special import rel_entr\n","\n","def Gaussian(z,mean,std):\n","    p = (1/(2 * np.pi * std**2)**1/2) * np.exp((-1/(2 * std**2)) * (z - mean)**2)\n","    return p\n","\n","def KL(p_z, q_z):\n","    kl = np.sum(p_z * (np.log(p_z ) - np.log(q_z )  ))\n","    return kl"],"metadata":{"id":"JsIlM9WRSKj0","executionInfo":{"status":"ok","timestamp":1701825092700,"user_tz":300,"elapsed":294,"user":{"displayName":"João Dick","userId":"09906120919510529946"}}},"execution_count":113,"outputs":[]},{"cell_type":"markdown","source":["If we plot the expression we can see that the KL-divergence reaches its minimum value when both pdf's are equal and $\\sigma = 1$"],"metadata":{"id":"JnUa-NpZrnM8"}},{"cell_type":"code","source":["from scipy.special import rel_entr\n","z = np.arange(0, 10, 0.01)\n","sigma =np.arange(0.01, 5, 0.01)\n","KL_values = []\n","for s in sigma:\n","    #KL_values.append(KL(Gaussian(z, 0, s), Gaussian(z,0, 1)))\n","    KL_values.append(np.sum(rel_entr(norm.pdf(z, 0, s), norm.pdf(z, 0, 1))))\n","plt.plot(sigma, KL_values )\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"yUxIpCsddUa_","executionInfo":{"status":"ok","timestamp":1701825106599,"user_tz":300,"elapsed":1084,"user":{"displayName":"João Dick","userId":"09906120919510529946"}},"outputId":"8a1721d0-560d-40c3-942f-44dd905a1db4"},"execution_count":115,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}