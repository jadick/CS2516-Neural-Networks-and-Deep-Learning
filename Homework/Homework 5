{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NWbovcc-ZUr5eBfh6xnw1X_Jxhgf7brJ","timestamp":1697548033570},{"file_id":"1irIemcomE8D4OTfhhHKEzo2e-2xYWkyj","timestamp":1696945569337}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"VYovBDSbwfYD"},"source":["# 1. Receptive field and parameter count (1 point)\n","\n","Recall that the *receptive field* refers to size of the region in the input that are visible to a given activation (or neuron) in a convolutional neural network. \"Visible\" here means that the values of those inputs affect the value of the activation. In all of the following questions, assume that the input image is arbitrarily large, so you don't need to worry about boundary effects or padding.\n","\n","1. Consider a convolutional network which consists of three convolutional layers, each with a filter size of 3x3, and a stride of 1x1. What is the receptive field size of one of the activations at the final output?\n","1. What is the receptive field if the stride is 2x3 at each layer?\n","1. What is the receptive field if the stride is 2x2 at each layer, and there is a 2x2 max-pooling layer with stride 2x2 after each convolutional layer?\n","1. Assume that the input image has 3 channels, the three convolutional layers have 16, 32, and 64 channels respectively, and that there are no biases on any of the layers. How many parameters does the network have?"]},{"cell_type":"markdown","source":["## Answers"],"metadata":{"id":"bxu_imzaoNK6"}},{"cell_type":"markdown","source":["The following answers are based on the lecture materials, [this](https://blog.mlreview.com/a-guide-to-receptive-field-arithmetic-for-convolutional-neural-networks-e0f514068807) blog post on receptive field arithmetic, and my own notes."],"metadata":{"id":"xSPzLssdyM_Y"}},{"cell_type":"markdown","source":["### 1.1)\n","Let $I_{h\\times w}^i$ be the input at a given layer $i$, $O_{h\\times w}^i$ the output the same layer, and $K_{h \\times w}$ the convolution kernel used. If we know the output and kernel dimensions at each layer, we can calculate the dimensions as:\n","$$I_h^i = O_h^i + K_h -1$$\n","$$I_w^i = O_w^i + K_w -1$$\n","$$\\small{(1)}$$\n","\n","**Third layer:**\n","\n","Considering the third layer output as a single activation with $O_h^3 = O_w^3 = 1$ we get:\n","\n","$$I_h^3 = 1 +3 -1 = 3$$\n","$$I_w^3 = 1 +3 -1 = 3$$\n","\n","**Second layer:**\n","\n","Given $ O_w^2 = O_h^2 = 3$, we have:\n","\n","$$I_h^2 = 3 +3 -1 = 5$$\n","$$I_w^2 = 3 +3 -1 = 5$$\n","\n","**First layer:**\n","\n","Given $ O_w^1 = O_h^1 = 5$, we have:\n","\n","$$I_h^1 = 5 +3 -1 = 7$$\n","$$I_w^1 = 5 +3 -1 = 7$$\n","\n","Therefore, the receptive field dimension is 7x7."],"metadata":{"id":"FQJhd-91oTAB"}},{"cell_type":"markdown","source":["\n","\n","### 1.2)\n","When dealing with a stride $S_{h \\times w} \\neq S_{1 \\times 1}$ we need to use a different formula. For layers with output dimensions $ > 1$ (i.e. the kernel is applied in more than one position) the stride dimensions will modify the input dimensions.\n","\n","$$I_h^i = S_h(O_h^i-1) + K_h $$\n","$$I_w^i = S_d(O_d^i-1) + K_d $$\n","$$\\small{(2)}$$\n","\n","**Layer 3:**\n","\n","Since $O_h^3 = O_w^3 = 1$, $S_{2x3}$ is not even used, as the kernel is only applied once. Therefore, we utilize Equation 1:\n","\n","$$I_h^3 = 1 +3 -1 = 3$$\n","$$I_w^3 = 1 +3 -1 = 3$$\n","\n","**Layer 2:**\n","\n","As $O_h^2 = O_w^2 = 3$, the kernel is applied at different input locations. Therefore, we utilize  Equation 2.\n","$$I_h^2 = 2(3-1) + 3  = 7$$\n","$$I_w^2 = 3(3-1) + 3 = 9$$\n","\n","**Layer 1:**\n","\n","Applyng the same procedure as in layer 2:\n","\n","$$I_h^1 = 2(7-1) + 3  = 15$$\n","$$I_w^1 = 3(9-1) + 3 = 27$$\n","\n","Therefore, the receptive field dimension is $15 \\times 27$."],"metadata":{"id":"AMTMkSLzwHfL"}},{"cell_type":"markdown","source":["### 1.3)\n","\n","As a 2x2 max-pooling layer with stride 2x2 will divide the convolution output dimensions by a factor of two (given that the dimensions are even), we can modify Equation 2 by multiplying $O_h^i$ and $O_h^i$ by $2$. Resultin in:\n","\n","$$I_h^i = S_h(2 \\times O_h^i-1) + K_h $$\n","$$I_w^i = S_d(2 \\times O_d^i-1) + K_d $$\n","$$\\small{(3)}$$\n","\n","Applying Equation 3 to each layer gives us:\n","\n","**Layer 3:**\n","\n","$$I_h^3 = 2(2 \\times 1-1) + 3 = 5 $$\n","$$I_w^3 = 2(2 \\times 1-1) + 3 = 5$$\n","\n","**Layer 2:**\n","\n","$$I_h^2 = 2(2 \\times 5-1) + 3 = 21$$\n","$$I_w^2 = 2(2 \\times 5-1) + 3 = 21$$\n","\n","**Layer 1:**\n","\n","$$I_h^2 = 2(2 \\times 21-1) + 3 = 85$$\n","$$I_w^2 = 2(2 \\times 21-1) + 3 = 85$$\n","\n","Therefore, the receptive field dimension is $85 \\times 85$."],"metadata":{"id":"lcS0BWm-qMke"}},{"cell_type":"markdown","source":["### 1.4)\n","For any given layer, the tensor dimensions can be defined as:\n","\n","$$c_i \\times c_o \\times K_w \\times K_h$$\n","\n","**Layer 1:**\n","\n","$$ 3 \\times 16 \\times 3 \\times 3 = 432$$\n","\n","**Layer 2:**\n","\n","$$16 \\times 32 \\times 3 \\times 3 = 4608$$\n","\n","**Layer 3:**\n","\n","$$32 \\times 64 \\times 3 \\times 3 = 18432$$\n","\n","Therefore, the total number of parameters is $432 + 4608 + 18432 = 23472$\n"],"metadata":{"id":"w6YVLI7dyzxP"}},{"cell_type":"markdown","metadata":{"id":"T8t21JGZyUr-"},"source":["# 2. CIFAR-10 classification (4 points)\n","\n","CIFAR-10 is a standard dataset where the goal is to classify 32 x 32 images into one of 10 classes. The goal of this problem is simple: build and train a convolutional neural network to perform classification on CIFAR-10. The problem is intentionally extremely open-ended! There are dozens (hundreds?) of tutorials online describing how to train a convnet on CIFAR-10 - please seek them out and make use of them. I recommend getting started with the [CIFAR-10 tutorial from PyTorch](https://colab.research.google.com/github/pytorch/tutorials/blob/gh-pages/_downloads/cifar10_tutorial.ipynb) which includes code for loading the dataset and evaluating performance on it. You are welcome to use any other resource that you want (but please cite it!) - as I mentioned there are many, many tutorials online, and googling for help is an utterly crucial skill for a researcher! You will be graded on the final test accuracy achieved by your model:\n","\n","- 60% accuracy or higher: 2/4 points\n","- 75% accuracy or higher: 3/4 points\n","- 90% accuracy or higher: 4/4 points\n","- Highest accuracy in the class: 4/3 points!\n","\n","Note that in order for us to know the final performance of your model, you will need to implement a function that computes the accuracy of your model on the test set (which appears in both of the linked tutorials above). The only rules are: You can only train your model on the CIFAR-10 training set (i.e. you can't use pre-trained models or other datasets for additional training, and you certaintly can't train on the CIFAR-10 test set!), and you must train the model on the free Colab GPU or TPU. This means you can only train the model for an hour or so! This is *much* less compute than is typically used for training CIFAR-10 models. As such, this is as much an exercise in building an accurate model as it is in building an efficient one. This is a popular game to play, and to the best of my knowledge the state-of-the-art is [this approach](https://myrtle.ai/learn/how-to-train-your-resnet/) which attains 96% accuracy in only *26 seconds* on a single GPU! (note that the final link on that page is broken; it should be [this](https://myrtle.ai/learn/how-to-train-your-resnet-8-bag-of-tricks/)).\n","\n","There are lots of things you can try to make your model more accurate and/or more efficient:\n","\n","1. Deeper models\n","1. Residual connections\n","1. [Data augmentation and normalization](https://d2l.ai/chapter_computer-vision/kaggle-cifar10.html#image-augmentation)\n","1. Regularization like dropout or weight decay\n","1. [Learning rate schedules](https://d2l.ai/chapter_optimization/lr-scheduler.html)\n","1. [Different forms of normalization](https://d2l.ai/chapter_convolutional-modern/batch-norm.html)\n","\n","Note that we haven't covered all these topics in class yet, but you should be able to get to at least 60% accuracy without applying all of these ideas - and probably 75% by tweaking around a little bit. Specifically, you should be able to get about 60% accuracy by taking the basic AlexNet architecture we discussed in class and applying it directly to CIFAR-10. And, if you're feeling adventurous, feel free to go for 96% using the aforementioned blog series! Good luck!"]},{"cell_type":"markdown","source":["The implemented Model follows the tutorials available at:\n","\n","*   https://myrtle.ai/learn/how-to-train-your-resnet/\n","*   https://freedium.cfd/https://medium.com/mlearning-ai/cifar10-image-classification-in-pytorch-e5185176fbef\n","\n"],"metadata":{"id":"uqeB34vb_04n"}},{"cell_type":"code","source":["!pip install --upgrade ray\n","!pip install hpbandster ConfigSpace"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fWcfNTB11dTU","executionInfo":{"status":"ok","timestamp":1697549673826,"user_tz":240,"elapsed":9549,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"07b71bfa-b5be-4263-f028-1e6c53409e8a"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: ray in /usr/local/lib/python3.10/dist-packages (2.7.1)\n","Requirement already satisfied: click>=7.0 in /usr/local/lib/python3.10/dist-packages (from ray) (8.1.7)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from ray) (3.12.4)\n","Requirement already satisfied: jsonschema in /usr/local/lib/python3.10/dist-packages (from ray) (4.19.1)\n","Requirement already satisfied: msgpack<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ray) (1.0.7)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from ray) (23.2)\n","Requirement already satisfied: protobuf!=3.19.5,>=3.15.3 in /usr/local/lib/python3.10/dist-packages (from ray) (3.20.3)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from ray) (6.0.1)\n","Requirement already satisfied: aiosignal in /usr/local/lib/python3.10/dist-packages (from ray) (1.3.1)\n","Requirement already satisfied: frozenlist in /usr/local/lib/python3.10/dist-packages (from ray) (1.4.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from ray) (2.31.0)\n","Requirement already satisfied: numpy>=1.19.3 in /usr/local/lib/python3.10/dist-packages (from ray) (1.23.5)\n","Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema->ray) (23.1.0)\n","Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema->ray) (2023.7.1)\n","Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema->ray) (0.30.2)\n","Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema->ray) (0.10.4)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->ray) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->ray) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->ray) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->ray) (2023.7.22)\n","Requirement already satisfied: hpbandster in /usr/local/lib/python3.10/dist-packages (0.7.4)\n","Requirement already satisfied: ConfigSpace in /usr/local/lib/python3.10/dist-packages (0.7.1)\n","Requirement already satisfied: Pyro4 in /usr/local/lib/python3.10/dist-packages (from hpbandster) (4.82)\n","Requirement already satisfied: serpent in /usr/local/lib/python3.10/dist-packages (from hpbandster) (1.41)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from hpbandster) (1.23.5)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from hpbandster) (0.14.0)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from hpbandster) (1.11.3)\n","Requirement already satisfied: netifaces in /usr/local/lib/python3.10/dist-packages (from hpbandster) (0.11.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from ConfigSpace) (3.1.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from ConfigSpace) (4.5.0)\n","Requirement already satisfied: more-itertools in /usr/local/lib/python3.10/dist-packages (from ConfigSpace) (10.1.0)\n","Requirement already satisfied: pandas>=1.0 in /usr/local/lib/python3.10/dist-packages (from statsmodels->hpbandster) (1.5.3)\n","Requirement already satisfied: patsy>=0.5.2 in /usr/local/lib/python3.10/dist-packages (from statsmodels->hpbandster) (0.5.3)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels->hpbandster) (23.2)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0->statsmodels->hpbandster) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.0->statsmodels->hpbandster) (2023.3.post1)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.2->statsmodels->hpbandster) (1.16.0)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import os\n","import pandas as pd\n","import seaborn as sns\n","import torch\n","import torchvision\n","from functools import partial\n","from matplotlib import pyplot as plt\n","from random import randrange\n","from ray import tune\n","from ray.tune import CLIReporter\n","from ray.tune.schedulers import HyperBandForBOHB, ASHAScheduler\n","from ray.tune.search.bohb import TuneBOHB\n","from ray.tune.search.hyperopt import HyperOptSearch\n","from tabulate import tabulate\n","from torch import nn, optim\n","from torch.nn import functional as F\n","from torch.utils.data import random_split\n","from torch.utils.data.sampler import SubsetRandomSampler\n","from torchsummary import summary"],"metadata":{"id":"PVeszhK-1NgY","executionInfo":{"status":"ok","timestamp":1697550060826,"user_tz":240,"elapsed":2,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')"],"metadata":{"id":"-70pD4SO1yRI","executionInfo":{"status":"ok","timestamp":1697550179481,"user_tz":240,"elapsed":218,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":["Data Collection"],"metadata":{"id":"Pa3p7r7F4Lxk"}},{"cell_type":"code","source":["transform = torchvision.transforms.Compose([\n","    torchvision.transforms.ToTensor(),\n","    torchvision.transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))\n","])\n","\n","# extra transfrom for the training data, in order to achieve better performance\n","train_transform = torchvision.transforms.Compose([\n","    torchvision.transforms.ToTensor(),\n","    torchvision.transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n","    torchvision.transforms.RandomCrop(32, padding=4, padding_mode='reflect'),\n","    torchvision.transforms.RandomHorizontalFlip(),\n","])\n","\n","trainset = torchvision.datasets.CIFAR10(\n","    root='./data', train=True, download=True, transform=train_transform\n",")\n","validationset = torchvision.datasets.CIFAR10(\n","    root='./data', train=True, download=True, transform=transform\n",")\n","testset = torchvision.datasets.CIFAR10(\n","    root='./data', train=False, download=True, transform=transform\n",")\n","\n","IDX_TO_LABEL = {v: k for k, v in trainset.class_to_idx.items()}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-khV1OT53tVi","executionInfo":{"status":"ok","timestamp":1697550184048,"user_tz":240,"elapsed":2918,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"c62eea7f-68ef-46e5-ac5f-c2b84ed2e8aa"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n","Files already downloaded and verified\n"]}]},{"cell_type":"markdown","source":["Dataset Analysis"],"metadata":{"id":"lnGnV7aO4H3K"}},{"cell_type":"code","source":["\n","print('Training set')\n","print(f'Samples: {trainset.data.shape}')\n","print(f'Labels: {len(trainset.targets)}')\n","\n","print('\\nTest set')\n","print(f'Samples: {testset.data.shape}')\n","print(f'Labels: {len(testset.targets)}')\n","\n","print('\\nClasses\\n')\n","print(tabulate(\n","    list(trainset.class_to_idx.items()), headers=['Name', 'Index'],\n","    tablefmt='orgtbl'\n","))\n","\n","cols = 6\n","rows = 4\n","fig, axs = plt.subplots(rows, cols, figsize=(12, 9))\n","\n","for x in range(rows):\n","    for y in range(cols):\n","        rnd_idx = randrange(len(trainset.data))\n","\n","        axs[x, y].set_title(IDX_TO_LABEL[trainset.targets[rnd_idx]])\n","        axs[x, y].imshow(trainset.data[rnd_idx])\n","        axs[x, y].set_axis_off()\n","\n","plt.show()\n","\n","\n","fig, ax = plt.subplots(figsize=(16, 6))\n","\n","sns.countplot(\n","    x=pd.Series(trainset.targets).map(IDX_TO_LABEL),\n","    order=IDX_TO_LABEL.values(),\n",").set_title('Training set distribution')\n","\n","plt.show()\n","\n","fig, ax = plt.subplots(figsize=(16, 6))\n","\n","sns.countplot(\n","    x=pd.Series(testset.targets).map(IDX_TO_LABEL),\n","    order=IDX_TO_LABEL.values(),\n",").set_title('Test set distribution')\n","\n","plt.show()"],"metadata":{"id":"pRULTG4l4F-L"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["CNN Implementation"],"metadata":{"id":"Jp_zMgCx4svC"}},{"cell_type":"code","source":["\n","class ResNet(nn.Module):\n","    def __init__(self):\n","        super(ResNet, self).__init__()\n","\n","        self.conv1 = nn.Sequential(\n","            nn.Conv2d(in_channels=3, out_channels=64, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(64),\n","            nn.ReLU(inplace=True)\n","        )\n","        self.conv2 = nn.Sequential(\n","            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(128),\n","            nn.ReLU(inplace=True),\n","            nn.MaxPool2d(2)\n","        )\n","\n","        self.res1 = nn.Sequential(nn.Sequential(\n","            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(128),\n","            nn.ReLU(inplace=True)\n","        ), nn.Sequential(\n","            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(128),\n","            nn.ReLU(inplace=True))\n","        )\n","\n","        self.conv3 = nn.Sequential(\n","            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(256),\n","            nn.ReLU(inplace=True),\n","            nn.MaxPool2d(2)\n","        )\n","        self.conv4 = nn.Sequential(\n","            nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(512),\n","            nn.ReLU(inplace=True),\n","            nn.MaxPool2d(2)\n","        )\n","\n","        self.res2 = nn.Sequential(nn.Sequential(\n","            nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(512),\n","            nn.ReLU(inplace=True)\n","        ), nn.Sequential(\n","            nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, padding=1),\n","            nn.BatchNorm2d(512),\n","            nn.ReLU(inplace=True))\n","        )\n","\n","        self.classifier = nn.Sequential(\n","            nn.MaxPool2d(4),\n","            nn.Flatten(),\n","            nn.Linear(512, 10)\n","        )\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.conv2(x)\n","        x = self.res1(x) + x\n","        x = self.conv3(x)\n","        x = self.conv4(x)\n","        x = self.res2(x) + x\n","        x = self.classifier(x)\n","\n","        return x"],"metadata":{"id":"rCifBhEg4qKB","executionInfo":{"status":"ok","timestamp":1697550371107,"user_tz":240,"elapsed":447,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["net = ResNet()\n","net = net.to(device)\n","summary(net, (3, 32, 32), batch_size=32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tw0jpLNX46jF","executionInfo":{"status":"ok","timestamp":1697550427228,"user_tz":240,"elapsed":13497,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"35227c5c-3df9-4a5c-f320-8b27b2b3ada1"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------\n","        Layer (type)               Output Shape         Param #\n","================================================================\n","            Conv2d-1           [32, 64, 32, 32]           1,792\n","       BatchNorm2d-2           [32, 64, 32, 32]             128\n","              ReLU-3           [32, 64, 32, 32]               0\n","            Conv2d-4          [32, 128, 32, 32]          73,856\n","       BatchNorm2d-5          [32, 128, 32, 32]             256\n","              ReLU-6          [32, 128, 32, 32]               0\n","         MaxPool2d-7          [32, 128, 16, 16]               0\n","            Conv2d-8          [32, 128, 16, 16]         147,584\n","       BatchNorm2d-9          [32, 128, 16, 16]             256\n","             ReLU-10          [32, 128, 16, 16]               0\n","           Conv2d-11          [32, 128, 16, 16]         147,584\n","      BatchNorm2d-12          [32, 128, 16, 16]             256\n","             ReLU-13          [32, 128, 16, 16]               0\n","           Conv2d-14          [32, 256, 16, 16]         295,168\n","      BatchNorm2d-15          [32, 256, 16, 16]             512\n","             ReLU-16          [32, 256, 16, 16]               0\n","        MaxPool2d-17            [32, 256, 8, 8]               0\n","           Conv2d-18            [32, 512, 8, 8]       1,180,160\n","      BatchNorm2d-19            [32, 512, 8, 8]           1,024\n","             ReLU-20            [32, 512, 8, 8]               0\n","        MaxPool2d-21            [32, 512, 4, 4]               0\n","           Conv2d-22            [32, 512, 4, 4]       2,359,808\n","      BatchNorm2d-23            [32, 512, 4, 4]           1,024\n","             ReLU-24            [32, 512, 4, 4]               0\n","           Conv2d-25            [32, 512, 4, 4]       2,359,808\n","      BatchNorm2d-26            [32, 512, 4, 4]           1,024\n","             ReLU-27            [32, 512, 4, 4]               0\n","        MaxPool2d-28            [32, 512, 1, 1]               0\n","          Flatten-29                  [32, 512]               0\n","           Linear-30                   [32, 10]           5,130\n","================================================================\n","Total params: 6,575,370\n","Trainable params: 6,575,370\n","Non-trainable params: 0\n","----------------------------------------------------------------\n","Input size (MB): 0.38\n","Forward/backward pass size (MB): 290.25\n","Params size (MB): 25.08\n","Estimated Total Size (MB): 315.71\n","----------------------------------------------------------------\n"]}]},{"cell_type":"markdown","source":["Dataloaders"],"metadata":{"id":"2OdNcLpW5DhG"}},{"cell_type":"code","source":["# percentage of training set to use as validation\n","valid_size = 0.2\n","\n","# obtain training indices that will be used for validation\n","num_train = len(trainset)\n","indices = list(range(num_train))\n","split = int(np.floor(valid_size * num_train))\n","train_idx, valid_idx = indices[split:], indices[:split]\n","\n","# define samplers for obtaining training and validation batches\n","TRAIN_SAMPLER = SubsetRandomSampler(train_idx)\n","VALID_SAMPLER = SubsetRandomSampler(valid_idx)\n","\n","# number of subprocesses to use for data loading\n","NUM_WORKERS = 2\n","\n","def data_loaders(trainset, validationset, testset, size):\n","    trainloader = torch.utils.data.DataLoader(\n","        trainset, batch_size=size,\n","        sampler=TRAIN_SAMPLER, num_workers=NUM_WORKERS\n","    )\n","    validloader = torch.utils.data.DataLoader(\n","        validationset, batch_size=size,\n","        sampler=VALID_SAMPLER, num_workers=NUM_WORKERS\n","    )\n","    testloader = torch.utils.data.DataLoader(\n","        testset, batch_size=size, num_workers=NUM_WORKERS\n","    )\n","\n","    return trainloader, validloader, testloader"],"metadata":{"id":"SjW-EoKQ6to0","executionInfo":{"status":"ok","timestamp":1697550889342,"user_tz":240,"elapsed":344,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["Training Functions"],"metadata":{"id":"JEE1UVRU67OJ"}},{"cell_type":"code","source":["def train_cifar(\n","    config, trainset, validationset, testset,\n","    epochs=10, checkpoint_dir=None, tuning=False\n","):\n","    net = ResNet()\n","    net.to(device)\n","\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.Adam(\n","        net.parameters(),\n","        lr=config['lr'],\n","        betas=(config['beta1'], config['beta2']),\n","        amsgrad=config['amsgrad'],\n","    )\n","\n","    # The `checkpoint_dir` parameter gets passed by Ray Tune when a checkpoint\n","    # should be restored\n","    if checkpoint_dir:\n","        checkpoint = os.path.join(checkpoint_dir, 'checkpoint')\n","        model_state, optimizer_state = torch.load(checkpoint)\n","        net.load_state_dict(model_state)\n","        optimizer.load_state_dict(optimizer_state)\n","\n","    trainloader, validloader, testloader = data_loaders(\n","        trainset, validationset, testset, config['batch_size']\n","    )\n","\n","    train_loss_list = []\n","    accuracy_list = []\n","\n","    # track minimum validation loss\n","    valid_loss_min = np.Inf\n","\n","    for epoch in range(epochs):\n","\n","        train_loss = 0.0\n","        net.train()\n","        for inputs, labels in trainloader:\n","            inputs, labels = inputs.to(device), labels.to(device)\n","\n","            optimizer.zero_grad()\n","\n","            outputs = net(inputs)\n","            loss = criterion(outputs, labels)\n","\n","            loss.backward()\n","            optimizer.step()\n","\n","            train_loss += loss.item() * inputs.size(0)\n","\n","        correct = 0\n","        valid_loss = 0.0\n","        net.eval()\n","        for inputs, labels in validloader:\n","            with torch.no_grad():\n","                inputs, labels = inputs.to(device), labels.to(device)\n","\n","                outputs = net(inputs)\n","                loss = criterion(outputs, labels)\n","\n","                valid_loss += loss.item() * inputs.size(0)\n","\n","                predicted = torch.max(outputs.data, 1)[1]\n","\n","                correct += (predicted == labels).sum().item()\n","\n","        train_loss = train_loss / len(TRAIN_SAMPLER)\n","        valid_loss = valid_loss / len(VALID_SAMPLER)\n","        accuracy = correct / len(VALID_SAMPLER)\n","\n","        train_loss_list.append(train_loss)\n","        accuracy_list.append(accuracy)\n","\n","        if not tuning:\n","            print(\n","                f'Epoch: {epoch} \\tTraining Loss: {train_loss:.6f} \\t'\n","                f'Validation Loss: {valid_loss:.6f} \\t'\n","                f'Validation Accuracy: {accuracy:.6f}'\n","            )\n","\n","            if valid_loss <= valid_loss_min:\n","                print(\n","                    'Validation loss decreased ('\n","                    f'{valid_loss_min:.6f} --> {valid_loss:.6f}).  '\n","                    'Saving model ...'\n","                )\n","\n","                torch.save(net.state_dict(), 'cnn.pt')\n","                valid_loss_min = valid_loss\n","        else:\n","            # Here we save a checkpoint. It is automatically registered with\n","            # Ray Tune and will potentially be passed as the `checkpoint_dir`\n","            # parameter in future iterations.\n","            with tune.checkpoint_dir(step=epoch) as checkpoint_dir:\n","                path = os.path.join(checkpoint_dir, 'checkpoint')\n","                torch.save((net.state_dict(), optimizer.state_dict()), path)\n","\n","            tune.report(mean_loss=valid_loss, accuracy=accuracy)\n","\n","    print('\\n----------- Finished Training -----------')\n","\n","    return train_loss_list, accuracy_list"],"metadata":{"id":"F49qjjBg66xw","executionInfo":{"status":"ok","timestamp":1697553916128,"user_tz":240,"elapsed":271,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["def test_accuracy(net, testloader):\n","    correct = 0\n","\n","    # since we're not training, we don't need to calculate the gradients for our outputs\n","    with torch.no_grad():\n","        net.eval()\n","        for images, labels in testloader:\n","            images, labels = images.to(device), labels.to(device)\n","\n","            # calculate outputs by running images through the network\n","            outputs = net(images)\n","\n","            # the class with the highest energy is what we choose as prediction\n","            predicted = torch.max(outputs.data, 1)[1]\n","\n","            correct += (predicted == labels).sum().item()\n","\n","    return correct / len(testloader.dataset)\n","\n","\n","def test_accuracy_per_class(net, testloader):\n","    correct_pred = {classname: 0 for classname in trainset.classes}\n","    total_pred = {classname: 0 for classname in trainset.classes}\n","\n","    with torch.no_grad():\n","        net.eval()\n","        for images, labels in testloader:\n","            images, labels = images.to(device), labels.to(device)\n","\n","            outputs = net(images)\n","            predicted = torch.max(outputs.data, 1)[1]\n","\n","            # collect the correct predictions for each class\n","            for label, prediction in zip(labels, predicted):\n","                if label == prediction:\n","                    correct_pred[trainset.classes[label]] += 1\n","                total_pred[trainset.classes[label]] += 1\n","\n","    accuracy_per_class = {classname: 0 for classname in trainset.classes}\n","    for classname, correct_count in correct_pred.items():\n","        accuracy = (100 * float(correct_count)) / total_pred[classname]\n","        accuracy_per_class[classname] = accuracy\n","\n","    return accuracy_per_class"],"metadata":{"id":"2S3xLpPO7Co6","executionInfo":{"status":"ok","timestamp":1697553919511,"user_tz":240,"elapsed":231,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["Training"],"metadata":{"id":"Qq34E5077QtU"}},{"cell_type":"code","source":["EPOCHS = 50\n","\n","config = {\n","    'batch_size': 16,\n","    'lr': 8.0505e-05,\n","    'beta1': 0.851436,\n","    'beta2': 0.999689,\n","    'amsgrad': True\n","}\n","\n","train_loss_list, accuracy_list = train_cifar(\n","    config, trainset, validationset, testset, epochs=EPOCHS\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZSqWUTx08YO7","executionInfo":{"status":"ok","timestamp":1697556279529,"user_tz":240,"elapsed":2357663,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"7ef5d8d2-b905-4c6e-c3bd-7823675686cc"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 \tTraining Loss: 1.239537 \tValidation Loss: 0.868394 \tValidation Accuracy: 0.699400\n","Validation loss decreased (inf --> 0.868394).  Saving model ...\n","Epoch: 1 \tTraining Loss: 0.823610 \tValidation Loss: 0.669906 \tValidation Accuracy: 0.765600\n","Validation loss decreased (0.868394 --> 0.669906).  Saving model ...\n","Epoch: 2 \tTraining Loss: 0.652407 \tValidation Loss: 0.583676 \tValidation Accuracy: 0.799900\n","Validation loss decreased (0.669906 --> 0.583676).  Saving model ...\n","Epoch: 3 \tTraining Loss: 0.559552 \tValidation Loss: 0.547647 \tValidation Accuracy: 0.814800\n","Validation loss decreased (0.583676 --> 0.547647).  Saving model ...\n","Epoch: 4 \tTraining Loss: 0.495947 \tValidation Loss: 0.432867 \tValidation Accuracy: 0.853400\n","Validation loss decreased (0.547647 --> 0.432867).  Saving model ...\n","Epoch: 5 \tTraining Loss: 0.438068 \tValidation Loss: 0.445747 \tValidation Accuracy: 0.843200\n","Epoch: 6 \tTraining Loss: 0.397263 \tValidation Loss: 0.414897 \tValidation Accuracy: 0.855400\n","Validation loss decreased (0.432867 --> 0.414897).  Saving model ...\n","Epoch: 7 \tTraining Loss: 0.353189 \tValidation Loss: 0.379300 \tValidation Accuracy: 0.869000\n","Validation loss decreased (0.414897 --> 0.379300).  Saving model ...\n","Epoch: 8 \tTraining Loss: 0.328346 \tValidation Loss: 0.375914 \tValidation Accuracy: 0.872000\n","Validation loss decreased (0.379300 --> 0.375914).  Saving model ...\n","Epoch: 9 \tTraining Loss: 0.303570 \tValidation Loss: 0.364029 \tValidation Accuracy: 0.875600\n","Validation loss decreased (0.375914 --> 0.364029).  Saving model ...\n","Epoch: 10 \tTraining Loss: 0.276824 \tValidation Loss: 0.342727 \tValidation Accuracy: 0.881800\n","Validation loss decreased (0.364029 --> 0.342727).  Saving model ...\n","Epoch: 11 \tTraining Loss: 0.256170 \tValidation Loss: 0.309045 \tValidation Accuracy: 0.893200\n","Validation loss decreased (0.342727 --> 0.309045).  Saving model ...\n","Epoch: 12 \tTraining Loss: 0.237113 \tValidation Loss: 0.334735 \tValidation Accuracy: 0.888300\n","Epoch: 13 \tTraining Loss: 0.214157 \tValidation Loss: 0.321749 \tValidation Accuracy: 0.891600\n","Epoch: 14 \tTraining Loss: 0.201683 \tValidation Loss: 0.346672 \tValidation Accuracy: 0.884200\n","Epoch: 15 \tTraining Loss: 0.185137 \tValidation Loss: 0.357732 \tValidation Accuracy: 0.882500\n","Epoch: 16 \tTraining Loss: 0.172563 \tValidation Loss: 0.319669 \tValidation Accuracy: 0.891400\n","Epoch: 17 \tTraining Loss: 0.161711 \tValidation Loss: 0.330968 \tValidation Accuracy: 0.889500\n","Epoch: 18 \tTraining Loss: 0.152146 \tValidation Loss: 0.299390 \tValidation Accuracy: 0.899400\n","Validation loss decreased (0.309045 --> 0.299390).  Saving model ...\n","Epoch: 19 \tTraining Loss: 0.139908 \tValidation Loss: 0.301000 \tValidation Accuracy: 0.900600\n","Epoch: 20 \tTraining Loss: 0.129529 \tValidation Loss: 0.298246 \tValidation Accuracy: 0.902300\n","Validation loss decreased (0.299390 --> 0.298246).  Saving model ...\n","Epoch: 21 \tTraining Loss: 0.119071 \tValidation Loss: 0.287940 \tValidation Accuracy: 0.904300\n","Validation loss decreased (0.298246 --> 0.287940).  Saving model ...\n","Epoch: 22 \tTraining Loss: 0.113390 \tValidation Loss: 0.285011 \tValidation Accuracy: 0.906600\n","Validation loss decreased (0.287940 --> 0.285011).  Saving model ...\n","Epoch: 23 \tTraining Loss: 0.102047 \tValidation Loss: 0.276065 \tValidation Accuracy: 0.909000\n","Validation loss decreased (0.285011 --> 0.276065).  Saving model ...\n","Epoch: 24 \tTraining Loss: 0.098282 \tValidation Loss: 0.281780 \tValidation Accuracy: 0.908300\n","Epoch: 25 \tTraining Loss: 0.090925 \tValidation Loss: 0.274392 \tValidation Accuracy: 0.912300\n","Validation loss decreased (0.276065 --> 0.274392).  Saving model ...\n","Epoch: 26 \tTraining Loss: 0.085648 \tValidation Loss: 0.277975 \tValidation Accuracy: 0.911300\n","Epoch: 27 \tTraining Loss: 0.079231 \tValidation Loss: 0.280096 \tValidation Accuracy: 0.910200\n","Epoch: 28 \tTraining Loss: 0.076681 \tValidation Loss: 0.280068 \tValidation Accuracy: 0.913200\n","Epoch: 29 \tTraining Loss: 0.073376 \tValidation Loss: 0.274191 \tValidation Accuracy: 0.915700\n","Validation loss decreased (0.274392 --> 0.274191).  Saving model ...\n","Epoch: 30 \tTraining Loss: 0.067058 \tValidation Loss: 0.331731 \tValidation Accuracy: 0.899600\n","Epoch: 31 \tTraining Loss: 0.064653 \tValidation Loss: 0.266280 \tValidation Accuracy: 0.916000\n","Validation loss decreased (0.274191 --> 0.266280).  Saving model ...\n","Epoch: 32 \tTraining Loss: 0.061292 \tValidation Loss: 0.263353 \tValidation Accuracy: 0.917300\n","Validation loss decreased (0.266280 --> 0.263353).  Saving model ...\n","Epoch: 33 \tTraining Loss: 0.056093 \tValidation Loss: 0.278302 \tValidation Accuracy: 0.912500\n","Epoch: 34 \tTraining Loss: 0.051289 \tValidation Loss: 0.274845 \tValidation Accuracy: 0.916100\n","Epoch: 35 \tTraining Loss: 0.049325 \tValidation Loss: 0.266236 \tValidation Accuracy: 0.918900\n","Epoch: 36 \tTraining Loss: 0.045744 \tValidation Loss: 0.278325 \tValidation Accuracy: 0.914600\n","Epoch: 37 \tTraining Loss: 0.046663 \tValidation Loss: 0.264545 \tValidation Accuracy: 0.917300\n","Epoch: 38 \tTraining Loss: 0.039421 \tValidation Loss: 0.259405 \tValidation Accuracy: 0.921700\n","Validation loss decreased (0.263353 --> 0.259405).  Saving model ...\n","Epoch: 39 \tTraining Loss: 0.037668 \tValidation Loss: 0.270594 \tValidation Accuracy: 0.920500\n","Epoch: 40 \tTraining Loss: 0.036963 \tValidation Loss: 0.264313 \tValidation Accuracy: 0.921600\n","Epoch: 41 \tTraining Loss: 0.034876 \tValidation Loss: 0.271013 \tValidation Accuracy: 0.920000\n","Epoch: 42 \tTraining Loss: 0.032174 \tValidation Loss: 0.266679 \tValidation Accuracy: 0.921400\n","Epoch: 43 \tTraining Loss: 0.034201 \tValidation Loss: 0.281338 \tValidation Accuracy: 0.916500\n","Epoch: 44 \tTraining Loss: 0.028125 \tValidation Loss: 0.287457 \tValidation Accuracy: 0.916300\n","Epoch: 45 \tTraining Loss: 0.029390 \tValidation Loss: 0.282532 \tValidation Accuracy: 0.918700\n","Epoch: 46 \tTraining Loss: 0.028766 \tValidation Loss: 0.281531 \tValidation Accuracy: 0.918200\n","Epoch: 47 \tTraining Loss: 0.025114 \tValidation Loss: 0.286160 \tValidation Accuracy: 0.915300\n","Epoch: 48 \tTraining Loss: 0.026103 \tValidation Loss: 0.281981 \tValidation Accuracy: 0.920100\n","Epoch: 49 \tTraining Loss: 0.021288 \tValidation Loss: 0.288985 \tValidation Accuracy: 0.917000\n","\n","----------- Finished Training -----------\n"]}]},{"cell_type":"markdown","source":["Model Evaluation"],"metadata":{"id":"_f5GmIi1PT9z"}},{"cell_type":"code","source":["fig, (ax1, ax2) = plt.subplots(2, figsize=(14, 8), sharex=True)\n","fig.suptitle('Training loss and Validation accuracy', size=15)\n","\n","ax1.plot([*range(EPOCHS)], train_loss_list, 'tab:red', label='train loss')\n","ax1.set(xlabel='Epoch', ylabel='Loss')\n","\n","plt.plot([*range(EPOCHS)], accuracy_list, 'tab:cyan', label='accuracy')\n","ax2.set(xlabel='Epoch', ylabel='Accuracy')\n","\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":776},"id":"LTebNjd4-oSr","executionInfo":{"status":"ok","timestamp":1697556360682,"user_tz":240,"elapsed":679,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"b7f69294-9de2-42c2-92eb-1d38d131aedf"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["_, _, testloader = data_loaders(\n","    trainset, validationset, testset, config['batch_size']\n",")\n","\n","trained_net = ResNet()\n","trained_net.to(device)\n","trained_net.load_state_dict(torch.load('cnn.pt'))\n","\n","overall_accuracy = test_accuracy(trained_net, testloader)\n","\n","print(\n","    'Overall accuracy of the network  '\n","    f'{(overall_accuracy * 100):.2f} %\\n'\n","    'on the 10000 test images'\n",")\n","\n","accuracy_per_class = test_accuracy_per_class(trained_net, testloader)\n","\n","print('Accuracy per class\\n')\n","for classname, accuracy in accuracy_per_class.items():\n","    print(f'{classname:12s} {accuracy:.2f} %')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LrRvS749-pjc","executionInfo":{"status":"ok","timestamp":1697556390227,"user_tz":240,"elapsed":11212,"user":{"displayName":"JoÃ£o Dick","userId":"09906120919510529946"}},"outputId":"1e2fe739-faa3-493f-cd32-6572a76ca515"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Overall accuracy of the network  91.43 %\n","on the 10000 test images\n","Accuracy per class\n","\n","airplane     92.20 %\n","automobile   96.40 %\n","bird         90.70 %\n","cat          81.30 %\n","deer         90.10 %\n","dog          85.80 %\n","frog         94.00 %\n","horse        94.50 %\n","ship         95.50 %\n","truck        93.80 %\n"]}]}]}