{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1uC56hVPGARsskedxHwV6d8VgyrbxugwG","timestamp":1700001781377},{"file_id":"1yVbZqZN05X5a5M-QnlONlr2S00D_z1r2","timestamp":1698773642202},{"file_id":"1JHfCgl7zh3cgqusqscTE3uMseC49EDNa","timestamp":1616602560792}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"Ovi3rNd9BeZ4"},"source":["# Homework 7\n","\n","In this homework, you will be using a form of attention called *attention pooling* to solve the \"addition problem\". The addition problem was introduced in the [LSTM paper](https://www.bioinf.jku.at/publications/older/2604.pdf) as a way to test whether an RNN could propagate information across many time steps. In the addition problem, the model is given a sequence of 2D vectors in the format:\n","\n","|     |      |     |     |      |     |      |     |     |     |     |\n","|-----|------|-----|-----|------|-----|------|-----|-----|-----|-----|\n","| 0.5 | -0.7 | 0.3 | 0.1 | -0.2 | ... | -0.5 | 0.9 | ... | 0.8 | 0.2 |\n","| 0   |   0  |  1  |  0  |   0  |     |   0  |  1  |     |  0  |  0  |\n","\n","The first dimension of each vector in the sequence is a random number between 0 and 1. The second dimension is 0 for all entries of the sequence except for 2 of the entries, where it is 1. The goal of the addition problem is to output the sum of the values in the first dimension at the two indices where the second dimension is 1. In the example above, the target would be 0.9 + 0.3 = 1.2. Below is a code snippet that generates a sequence and its target for the addition problem."]},{"cell_type":"code","metadata":{"id":"r42nn-jOxhKp","executionInfo":{"status":"ok","timestamp":1700018602270,"user_tz":300,"elapsed":251,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}}},"source":["import numpy as np\n","\n","def addition_problem(sequence_length=50):\n","    output = np.random.uniform(-1, 1, (sequence_length, 2))\n","    output[:, 0] = 0.\n","    random_indices = np.random.choice(sequence_length, size=2, replace=False)\n","    output[random_indices, [0, 0]] = 1\n","    return output, (output[:, 0]*output[:, 1]).sum(keepdims=True)"],"execution_count":1,"outputs":[]},{"cell_type":"code","source":["x,y= addition_problem()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"57-_SQB3NbW5","executionInfo":{"status":"ok","timestamp":1700023620538,"user_tz":300,"elapsed":2,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}},"outputId":"a37d27fb-da54-40d6-86d3-26f958f962a0"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([50, 2, 1])\n"]}]},{"cell_type":"markdown","metadata":{"id":"Ew0FypwYCwpn"},"source":["Attention pooling is a form of attention that allows a model to solve the addition problem without using an RNN. In attention pooling, the query vector $q$ is a *learnable parameter*. The keys and values are both the input sequence. Specifically, given a sequence $\\{h_1, h_2, \\ldots, h_T\\}$, attention pooling computes\n","\\begin{align}\n","e_t &= \\mathrm{a}(q, h_t) \\\\\n","\\alpha_t &= \\frac{\\exp(e_t)}{\\sum_k \\exp(e_k)} \\\\\n","c &= \\sum_{t = 1}^T \\alpha_t h_t\n","\\end{align}\n","where $\\mathrm{a}(q, h_t)$ is the attention energy function. Note that c will always be a fixed-length vector (which amounts to a weighted average of the elements of the sequence $h$) regardless of how long the sequence is (i.e. the value of $T$). $\\mathrm{a}(q, h_t)$ can be any function that takes in a single entry of the sequence $h_t$ and outputs an unnormalizes scalar value. One option is to use\n","$$\\mathrm{a}(q, h_t) = q^\\top \\tanh(W_a h_t + b_a)$$\n","where $q \\in \\mathbb{R}^q$, $W_a \\in \\mathbb{R}^{q \\times d}$, and $b_a \\in \\mathbb{R}^q$ are learnable parameters, and $d$ is the dimensionality of $h_t$ (i.e. $h_t \\in \\mathbb{R}^d$).\n","\n","\n","1. Build and train a neural network that uses attention pooling to solve the addition problem. The model should output a scalar which corresponds to the target value for the addition problem (i.e. the sum of the sequence entries that are marked with a \"1\"). Here, \"solved\" means that the squared error of the model's predicitons is always below $0.05$. Use a sequence length of $50$ (which is the default for the `addition_problem` function defined above). *Hints*:\n","  1. This is a regression problem. Your model should predict a continuous scalar value and you can use a squared-error loss.\n","  1. The point of the attention pooling layer is to allow you to put it in an otherwise feed-forward network. So, consider just using simple dense feed-forward layers before and/or after the attention pooling layer. To start, you can try the architecture: feed-forward, attention pooling, feed-forward, output layer.\n","  1. If you are finding that the model is getting stuck at a non-zero squared error, it could be that it's just outputting the mean value and having trouble learning a good solution. Try different initialization, nonlinearities, architecture, learning rate, etc.\n","1. Once you have trained a model that gets solid performance at sequence length $50$, plot the model's average squared error for sequence lengths $50, 55, 65, 80, 100, 125, 150$. You should generate this plot by averaging the squared error over at least $100$ sequences of a given length. Does the model's error get worse (go up) for longer sequences, or does it generalize to longer sequence lengths?"]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import numpy as np\n","from matplotlib import pyplot as plt\n","\n","class AttentionPooling(nn.Module):\n","    def __init__(self, input_dim, attention_dim):\n","        super(AttentionPooling, self).__init__()\n","        self.W = nn.Linear(input_dim, attention_dim)\n","        self.q = nn.Parameter(torch.randn(attention_dim))\n","        self.softmax = nn.Softmax()\n","\n","    def forward(self, h):\n","        e_t = torch.matmul(torch.tanh(self.W(h)), self.q)\n","        e_t = e_t.unsqueeze(0) if e_t.dim() == 1 else e_t\n","        #print(e_t.shape)\n","        alpha_t = self.softmax(e_t)\n","        return  torch.sum(h * alpha_t.unsqueeze(-1), dim=1)\n","\n","class AdditionNet(nn.Module):\n","    def __init__(self, input_dim, hidden_dim):\n","        super(AdditionNet, self). __init__()\n","        self.dense1 = nn.Linear(input_dim, hidden_dim)\n","        self.attention = AttentionPooling(hidden_dim, hidden_dim)\n","        self.dense2 = nn.Linear(hidden_dim, hidden_dim)\n","        self.dense3 = nn.Linear(hidden_dim, 1)\n","\n","        self.relu = nn.ReLU()\n","\n","    def forward(self, x):\n","        x = self.dense1(x)\n","        #print(x.shape)\n","        x = self.relu(x)\n","        x = self.attention(x)\n","        x = self.dense2(x)\n","        x = self.relu(x)\n","        x = self.dense3(x)\n","        return x\n","\n","if torch.cuda.is_available():\n"," device = \"cuda:0\"\n","else:\n"," device = \"cpu\"\n"],"metadata":{"id":"gzqqN15C-0sc","executionInfo":{"status":"ok","timestamp":1700025787294,"user_tz":300,"elapsed":150,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}}},"execution_count":130,"outputs":[]},{"cell_type":"code","source":["X, y = addition_problem()\n","input_dim = X.shape[1]\n","model = AdditionNet(input_dim, 64)\n","model.to(device)\n","criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n","\n","EPOCHS = 30000\n","validation_loss = []\n","for epoch in range(EPOCHS):\n","\n","    #load training data\n","    X_train, y_train = addition_problem()\n","    X_train = torch.tensor(X_train, dtype=torch.float32).to(device)\n","    y_train = torch.tensor([y_train], dtype=torch.float32).to(device)\n","    #train\n","    model.train()\n","    optimizer.zero_grad()\n","    outputs_train = model(X_train)\n","    train_loss = criterion(outputs_train, y_train)\n","    train_loss.backward()\n","    optimizer.step()\n","    #load valdiation data\n","    X_val, y_val = addition_problem()\n","    X_val = torch.tensor(X_val, dtype=torch.float32).to(device)\n","    y_val = torch.tensor([y_val], dtype=torch.float32).to(device)\n","    #validate\n","    model.eval()\n","    with torch.no_grad():\n","        outputs_val = model(X_val)\n","        val_loss = criterion(outputs_val, y_val)\n","        validation_loss.append(val_loss.item())\n","\n","\n","    if epoch % 1000 == 0:\n","        print(f\"Epoch [{epoch+1}/{EPOCHS}], Training loss: {train_loss.item()}, Validation loss: {val_loss.item()}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_nEVQwkSPcGr","executionInfo":{"status":"ok","timestamp":1700027450257,"user_tz":300,"elapsed":86130,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}},"outputId":"049b7fc3-25e6-4b86-cec1-a7a41ff2b6fb"},"execution_count":160,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [1/30000], Training loss: 0.012641029432415962, Validation loss: 4.016443926957436e-05\n","Epoch [1001/30000], Training loss: 0.043585773557424545, Validation loss: 0.24100616574287415\n","Epoch [2001/30000], Training loss: 0.04439060017466545, Validation loss: 0.015423712320625782\n","Epoch [3001/30000], Training loss: 0.012097177095711231, Validation loss: 0.17862620949745178\n","Epoch [4001/30000], Training loss: 0.006495403125882149, Validation loss: 0.005633289460092783\n","Epoch [5001/30000], Training loss: 2.878401573980227e-05, Validation loss: 0.001853450550697744\n","Epoch [6001/30000], Training loss: 0.0001405157381668687, Validation loss: 0.00021780532551929355\n","Epoch [7001/30000], Training loss: 0.0003618178889155388, Validation loss: 8.520203118678182e-05\n","Epoch [8001/30000], Training loss: 2.4126904463628307e-05, Validation loss: 4.958543513566838e-07\n","Epoch [9001/30000], Training loss: 0.0001601198746357113, Validation loss: 6.0272126575000584e-05\n","Epoch [10001/30000], Training loss: 6.447928171837702e-06, Validation loss: 4.162938421359286e-05\n","Epoch [11001/30000], Training loss: 6.930629751877859e-05, Validation loss: 6.921700696693733e-05\n","Epoch [12001/30000], Training loss: 2.425105094516766e-07, Validation loss: 1.4260981515690219e-05\n","Epoch [13001/30000], Training loss: 1.2304193660384044e-05, Validation loss: 0.0001473269221605733\n","Epoch [14001/30000], Training loss: 0.0007062575314193964, Validation loss: 0.0003813760122284293\n","Epoch [15001/30000], Training loss: 0.00011626830382738262, Validation loss: 8.90809405973414e-06\n","Epoch [16001/30000], Training loss: 0.000382031052140519, Validation loss: 0.0008521955460309982\n","Epoch [17001/30000], Training loss: 1.0967512025672477e-05, Validation loss: 6.538574234582484e-05\n","Epoch [18001/30000], Training loss: 2.6170871933572926e-05, Validation loss: 0.00029693671967834234\n","Epoch [19001/30000], Training loss: 8.530065542800003e-08, Validation loss: 4.0229202568298206e-05\n","Epoch [20001/30000], Training loss: 1.4252204039166827e-07, Validation loss: 3.5537086660042405e-05\n","Epoch [21001/30000], Training loss: 3.109066028628149e-06, Validation loss: 2.7594248876994243e-06\n","Epoch [22001/30000], Training loss: 5.092118499305798e-06, Validation loss: 2.1873749574297108e-05\n","Epoch [23001/30000], Training loss: 7.751869998173788e-05, Validation loss: 0.0004976358613930643\n","Epoch [24001/30000], Training loss: 0.00021452957298606634, Validation loss: 0.00010318683052901179\n","Epoch [25001/30000], Training loss: 1.0472922440385446e-05, Validation loss: 3.7649763271474512e-06\n","Epoch [26001/30000], Training loss: 8.563173651054967e-06, Validation loss: 5.162570232641883e-06\n","Epoch [27001/30000], Training loss: 0.0002780637878458947, Validation loss: 0.0007703825831413269\n","Epoch [28001/30000], Training loss: 1.6420985048171133e-05, Validation loss: 2.9152941351640038e-05\n","Epoch [29001/30000], Training loss: 9.016405783768278e-06, Validation loss: 4.95116546517238e-06\n"]}]},{"cell_type":"markdown","source":["By observing the displayed validation loss logs and validation loss plot we verify that the model achieves $MSE < 0.05$."],"metadata":{"id":"W1gXg3k5Z_8d"}},{"cell_type":"code","source":["plt.plot(validation_loss)\n","plt.axhline(y = 0.05, color = 'r', linestyle = '-')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"ShCUFpoRlT4e","executionInfo":{"status":"ok","timestamp":1700027450257,"user_tz":300,"elapsed":15,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}},"outputId":"f01a4b31-a1d7-4d28-f695-ef00d72fa29a"},"execution_count":161,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["lengths= [50,55,65,80,100,125,150]\n","\n","for len in lengths:\n","    MSE = 0\n","    for i in range(100):\n","        x, y = addition_problem(len)\n","        x = torch.Tensor(x).to(device)\n","        y = torch.Tensor(y).to(device)\n","        model.eval()\n","        with torch.no_grad():\n","            output = model(x)\n","            loss = criterion(output, y)\n","            MSE += loss.item()\n","            #print(loss.item())\n","    MSE = MSE/100\n","    print(f\"MSE for length {len} is {MSE}\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vHg-axw-VUcL","executionInfo":{"status":"ok","timestamp":1700027455048,"user_tz":300,"elapsed":980,"user":{"displayName":"Jo達o Dick","userId":"09906120919510529946"}},"outputId":"4c4b9c0c-420b-4003-db37-45199638ab25"},"execution_count":162,"outputs":[{"output_type":"stream","name":"stdout","text":["MSE for length 50 is 3.430476771441704e-05\n","MSE for length 55 is 3.125289208821158e-05\n","MSE for length 65 is 2.6328903410126614e-05\n","MSE for length 80 is 3.403158957309471e-05\n","MSE for length 100 is 2.2096396479478477e-05\n","MSE for length 125 is 2.3590429293491864e-05\n","MSE for length 150 is 3.0195941093893452e-05\n"]}]},{"cell_type":"markdown","source":["We can observe that the average validation loss for 100 different sequences  also achieves $MSE < 0.05$, generalizing for longer sequences."],"metadata":{"id":"v9wWfrr2fZoV"}}]}